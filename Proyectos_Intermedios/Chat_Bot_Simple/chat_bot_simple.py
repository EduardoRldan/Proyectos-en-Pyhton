import random
import re
import nltk
from nltk.chat.util import Chat, reflections

nltk.download('punkt')

pares = [
    (r"hola|hi|buenas", ["Â¡Hola! Â¿CÃ³mo puedo ayudarte?", "Â¡Hola! Â¿En quÃ© te puedo ayudar?"]),
    (r"cÃ³mo estÃ¡s|quÃ© tal", ["Estoy bien, gracias por preguntar ğŸ˜Š", "Muy bien, Â¿y tÃº?"]),
    (r"cuÃ¡l es tu nombre|cÃ³mo te llamas", ["Soy un chatbot creado en Python. Â¿Y tÃº?"]),
    (r"adiÃ³s|bye|chau", ["Â¡Hasta luego! ğŸ˜Š", "Nos vemos pronto. ğŸ‘‹"]),
    (r"(.*) tu creador", ["Fui creado por un desarrollador que usa Python."]),
    (r"(.*) (tu edad|cuÃ¡ntos aÃ±os tienes)", ["Soy un programa, asÃ­ que no tengo edad."]),
    (r"(.*) ayuda", ["Claro, dime en quÃ© necesitas ayuda."]),
    (r"(.*)", ["Lo siento, no entiendo esa pregunta. Â¿Puedes reformularla? ğŸ¤–"])
]

chatbot = Chat(pares, reflections)

print("ğŸ¤– Chatbot: Â¡Hola! Escribe 'salir' para terminar la conversaciÃ³n.")
while True:
    entrada = input("TÃº: ").lower()
    if entrada == "salir":
        print("ğŸ¤– Chatbot: Â¡Hasta luego! ğŸ‘‹")
        break
    respuesta = chatbot.respond(entrada)
    print(f"ğŸ¤– Chatbot: {respuesta}")
import random
import re
import nltk
import pyttsx3
from datetime import datetime
from nltk.chat.util import Chat, reflections
from nltk.corpus import wordnet

# Descargar recursos de NLTK (si no estÃ¡n descargados)
nltk.download('punkt')
nltk.download('wordnet')

# Inicializar el motor de texto a voz
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Velocidad del habla
engine.setProperty('volume', 1)  # Volumen

# FunciÃ³n para que el chatbot hable
def speak(text):
    engine.say(text)
    engine.runAndWait()

# FunciÃ³n para encontrar sinÃ³nimos de palabras
def obtener_sinonimos(palabra):
    sinonimos = set()
    for syn in wordnet.synsets(palabra):
        for lemma in syn.lemmas():
            sinonimos.add(lemma.name())
    return list(sinonimos)

# Definir pares de preguntas y respuestas con mejor comprensiÃ³n
pares = [
    (r"hola|hi|buenas|quÃ© tal", ["Â¡Hola! Â¿CÃ³mo puedo ayudarte?", "Â¡Hola! Â¿CÃ³mo estÃ¡s hoy?"]),
    (r"cÃ³mo estÃ¡s|quÃ© tal", ["Estoy bien, gracias por preguntar ğŸ˜Š", "Â¡Me siento genial! Â¿Y tÃº?"]),
    (r"cuÃ¡l es tu nombre|cÃ³mo te llamas", ["Soy un chatbot creado en Python. Â¿Y tÃº?"]),
    (r"quÃ© hora es|dime la hora", [lambda: f"Son las {datetime.now().strftime('%H:%M')}."]),
    (r"quÃ© dÃ­a es hoy|dime la fecha", [lambda: f"Hoy es {datetime.now().strftime('%A, %d de %B del %Y')}."]),
    (r"adiÃ³s|bye|chau", ["Â¡Hasta luego! ğŸ˜Š", "Nos vemos pronto. ğŸ‘‹"]),
    (r"(.*) ayuda", ["Claro, dime en quÃ© necesitas ayuda."]),
    (r"(.*) tu creador", ["Fui creado por un desarrollador apasionado por Python."]),
    (r"(.*) (tu edad|cuÃ¡ntos aÃ±os tienes)", ["Soy un programa, asÃ­ que no tengo edad."]),
    (r"(.*)", ["Lo siento, no entiendo esa pregunta. Â¿Puedes reformularla? ğŸ¤–"])
]

# Crear el chatbot
chatbot = Chat(pares, reflections)

# Iniciar la conversaciÃ³n
print("ğŸ¤– Chatbot: Â¡Hola! Escribe 'salir' para terminar la conversaciÃ³n.")
speak("Â¡Hola! Escribe salir para terminar la conversaciÃ³n.")

while True:
    entrada = input("TÃº: ").lower()
    if entrada == "salir":
        print("ğŸ¤– Chatbot: Â¡Hasta luego! ğŸ‘‹")
        speak("Hasta luego")
        break

    respuesta = chatbot.respond(entrada)
    
    # Si la respuesta es una funciÃ³n, se ejecuta
    if callable(respuesta):
        respuesta = respuesta()
    
    print(f"ğŸ¤– Chatbot: {respuesta}")
    speak(respuesta)
